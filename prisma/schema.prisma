// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- NextAuth.js Models ---
// These models are required by NextAuth.js when using the Prisma adapter.
// They store user accounts, sessions, and verification tokens.

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // ADDED: Field for password hashing
  accounts      Account[]
  sessions      Session[]
  forms         Form[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Form {
  id          String         @id @default(cuid())
  title       String
  description String?
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  fields      FormField[]
  responses   FormResponse[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model FormField {
  id        String       @id @default(cuid())
  formId    String
  type      String
  label     String
  required  Boolean
  options   String[]     @default([])
  form      Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers   ResponseAnswer[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model FormResponse {
  id          String           @id @default(cuid())
  formId      String
  submittedAt DateTime         @default(now())
  form        Form             @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     ResponseAnswer[]
}

model ResponseAnswer {
  id         String       @id @default(cuid())
  responseId String
  fieldId    String
  value      String
  response   FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  field      FormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@unique([responseId, fieldId])
}